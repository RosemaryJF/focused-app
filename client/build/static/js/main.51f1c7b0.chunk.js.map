{"version":3,"sources":["utils/auth.js","components/SiteEntry/index.js","pages/Home.js","utils/mutations.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","SiteEntry","showSiteEntry","Auth","loggedIn","id","to","colorScheme","variant","Home","className","gql","Nav","role","href","onClick","logout","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","HOME","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.51f1c7b0.chunk.js","sourcesContent":["import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SiteEntry() {\r\n\r\n  function showSiteEntry() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <div id=\"homeSignedIn\">\r\n          <Link to=\"/profile\">\r\n            <button colorScheme='#C58940' variant='outline'>Profile</button>\r\n          </Link>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div id=\"homeNotSignedIn\">\r\n          <Link to=\"/signup\">\r\n            <button colorScheme='#C58940' variant='outline'>Signup</button>\r\n          </Link>\r\n          <Link to=\"/login\">\r\n            <button colorScheme='#C58940' variant='outline'>Login</button>\r\n          </Link>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    { showSiteEntry }\r\n  )\r\n}\r\n\r\nexport default SiteEntry;","import React, { useState } from 'react';\r\nimport SiteEntry from \"../components/SiteEntry\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 id=\"welcome\">Ready to get focused?</h1>\r\n      <SiteEntry />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_DAY = gql`\r\n  mutation addDay(\r\n    $user: ID!\r\n    $dayDate: Day\r\n    $climb: ID!\r\n    $focus: String!\r\n    $attempts: Number!\r\n    $rests: Number\r\n    $beta: String!\r\n    $notes: String!\r\n  ) {\r\n    addDay(\r\n      user: $user\r\n      # dayDate\r\n      climb: $climb\r\n      crag: $crag\r\n      focus: $focus\r\n      attempts: $attempts\r\n      rests: $rests\r\n      beta: $beta\r\n      notes: $notes\r\n    )\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <span role=\"img\" aria-label=\"shopping bag\">üõçÔ∏è</span>\r\n          -Shop-Shop\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\n// import { ThemeContext, ThemeProvider } from './utils/GlobalState';\r\n\r\nimport Home from './pages/Home';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport Nav from './components/Nav';\r\n// TO WRITE\r\n// import Detail from './pages/Detail';\r\n// import NoMatch from './pages/NoMatch';\r\n// import Days from './pages/Days';\r\n// import Profile from './pages/Profile';\r\n\r\n\r\n// import Success from './pages/Success';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          {/* <ThemeProvider>\r\n            <ThemeContext> */}\r\n          <Nav />\r\n          <Home />\r\n          <Routes>\r\n            <Route\r\n              path=\"/\"\r\n              element={<Home />} HOME\r\n            />\r\n            {/* <Route\r\n              path=\"/login\"\r\n              element={<Login />}\r\n            />\r\n            <Route\r\n              path=\"/signup\"\r\n              element={<Signup />}\r\n            />\r\n            <Route\r\n                path=\"/success\"\r\n                element={<Success />}\r\n              />\r\n              <Route\r\n                path=\"/profile\"\r\n                element={<Profile />}\r\n              />\r\n              <Route\r\n                path=\"/days\"\r\n                element={<Days />}\r\n              />\r\n              <Route\r\n                path=\"/days/:id\"\r\n                element={<Detail />}\r\n              />\r\n              <Route\r\n                path=\"*\"\r\n                element={<NoMatch />}\r\n              /> */}\r\n          </Routes>\r\n          {/* </ThemeContext>\r\n          </ThemeProvider> */}\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\n// function App() {\r\n//   return (\r\n//     <div>\r\n//       <Home />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './custom.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// This enables the app to run offline and load faster. It can be changed to\r\n// unregister() below. Note; register() comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}